{"version":3,"sources":["../webpack/bootstrap","../external \"vscode\"",".././src/models.ts",".././src/history.ts",".././src/extension.ts",".././src/editorHighlights.ts",".././src/provider.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","getRequestRange","doc","pos","range","getWordRangeAtPosition","getPreviewChunks","beforeLen","trim","previewStart","start","with","character","Math","max","wordRange","before","getText","vscode","Range","inside","previewEnd","end","translate","after","replace","Context","commands","executeCommand","this","IsActive","Source","HasResult","HasHistory","CallHierarchyMode","FileItem","uri","results","parent","warmUpNext","_document","workspace","openTextDocument","item","move","then","getDocument","ReferenceItem","location","ReferencesModel","source","position","locations","_onDidChange","EventEmitter","onDidChange","event","items","last","sort","_compareLocations","loc","toString","push","Promise","resolve","args","e","preview","String","fromCharCode","HistoryItem","makeId","asRelativePath","WordAnchor","length","ref","contains","lastBefore","isAfter","best","bestValue","_prefixLen","_del","fire","fwd","delta","_move","idx","indexOf","_tail","a","b","isBefore","charCodeAt","array","splice","RichCallsDirection","_mem","_value","raw","_key","set","update","CallItem","CallsModel","direction","roots","map","undefined","calls","from","fromRanges","Location","to","first","selectionRange","line","_doc","_position","_version","version","_word","_getAnchorWord","wordNow","startLine","checked","lineCount","ch","lineAt","text","Position","id","label","description","commandId","extraArgs","anchor","str","JSON","stringify","Buffer","_items","Map","size","iterator","values","delete","clear","context","callsDirection","globalState","history","History","provider","TreeDataProviderWrapper","viewId","view","window","createTreeView","treeDataProvider","showCollapseAll","editorHighlights","EditorHighlights","model","onDidChangeActiveTextEditor","visible","show","subscriptions","onDidChangeVisibility","hide","updateModel","async","newModel","message","setModel","Boolean","revealView","showResultsMessage","showNoResultsMessage","isEmpty","title","total","files","updateReferencesModel","selection","reveal","select","focus","add","asHistoryItem","findReferencesCommand","Uri","activeTextEditor","editor","document","active","refindCommand","getPosition","updateCallHierachyModel","expand","setCallHierarchyDirectionCommand","arg","showItemCommand","focusEditor","preserveFocus","showTextDocument","focusRefCommand","next","copyCommand","val","stack","pop","slice","chunks","env","clipboard","writeText","showReferences","showReferencesDisposable","config","updateShowReferences","affectsConfiguration","getConfiguration","dispose","registerCommand","onDidChangeConfiguration","remove","refresh","scheme","fsPath","picks","pick","showQuickPick","placeHolder","_view","_decorationType","createTextEditorDecorationType","backgroundColor","ThemeColor","rangeBehavior","DecorationRangeBehavior","ClosedClosed","overviewRulerLane","OverviewRulerLane","Center","overviewRulerColor","_ignore","Set","_model","_listener","onDidChangeTextDocument","onDidChangeSelection","viewColumn","ranges","has","sel","setDecorations","visibleTextEditors","ReferencesProvider","_onDidChangeTreeData","onDidChangeTreeData","_modelListener","element","result","TreeItem","contextValue","iconPath","ThemeIcon","File","collapsibleState","TreeItemCollapsibleState","Collapsed","highlights","TreeItem2","None","command","arguments","CallItemDataProvider","_emitter","detail","_getThemeIcon","kind","resolveCalls","_themeIconIds","HistoryDataProvider","_history","_providerListener","_provider","getTreeItem","getChildren","getParent"],"mappings":"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","file":"extension.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","module.exports = require(\"vscode\");","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as vscode from 'vscode';\nimport { HistoryItem, WordAnchor } from './history';\n\n\nexport function getRequestRange(doc: vscode.TextDocument, pos: vscode.Position): vscode.Range | undefined {\n    let range = doc.getWordRangeAtPosition(pos);\n    if (!range) {\n        range = doc.getWordRangeAtPosition(pos, /[^\\s]+/);\n    }\n    return range;\n}\n\nexport function getPreviewChunks(doc: vscode.TextDocument, range: vscode.Range, beforeLen: number = 8, trim: boolean = true) {\n    let previewStart = range.start.with({ character: Math.max(0, range.start.character - beforeLen) });\n    let wordRange = doc.getWordRangeAtPosition(previewStart);\n    let before = doc.getText(new vscode.Range(wordRange ? wordRange.start : previewStart, range.start));\n    let inside = doc.getText(range);\n    let previewEnd = range.end.translate(0, 331);\n    let after = doc.getText(new vscode.Range(range.end, previewEnd));\n    if (trim) {\n        before = before.replace(/^\\s*/g, '');\n        after = after.replace(/\\s*$/g, '');\n    }\n    return { before, inside, after };\n}\n\nexport class Context<V> {\n\n    static IsActive = new Context<boolean>('reference-list.isActive');\n    static Source = new Context<ItemSource | 'callHierarchy' | undefined>('reference-list.source');\n    static HasResult = new Context<boolean>('reference-list.hasResult');\n    static HasHistory = new Context<boolean>('reference-list.hasHistory');\n    static CallHierarchyMode = new Context<'showOutgoing' | 'showIncoming'>('references-view.callHierarchyMode');\n\n    private constructor(readonly name: string) { }\n\n    async set(value: V) {\n        vscode.commands.executeCommand('setContext', this.name, value);\n    }\n}\n\nexport const enum ItemSource {\n    References = 'vscode.executeReferenceProvider',\n    Implementations = 'vscode.executeImplementationProvider',\n    CallHierarchy = 'vscode.prepareCallHierarchy'\n}\n\n\n//#region References Model\n\n\nexport class FileItem {\n\n    private _document: Thenable<vscode.TextDocument> | undefined;\n\n    constructor(\n        readonly uri: vscode.Uri,\n        readonly results: Array<ReferenceItem>,\n        readonly parent: ReferencesModel\n    ) { }\n\n    async getDocument(warmUpNext?: boolean) {\n        if (!this._document) {\n            this._document = vscode.workspace.openTextDocument(this.uri);\n        }\n        if (warmUpNext) {\n            // load next document once this document has been loaded\n            // and when next document has not yet been loaded\n            const item = await this.parent.move(this, true);\n            if (item && !item.parent._document) {\n                this._document.then(() => item.parent.getDocument(false));\n            }\n        }\n        return this._document;\n    }\n}\n\nexport class ReferenceItem {\n    constructor(\n        readonly location: vscode.Location,\n        readonly parent: FileItem,\n    ) { }\n}\n\nexport class ReferencesModel {\n\n    static create(uri: vscode.Uri, position: vscode.Position, source: ItemSource): ReferencesModel {\n        const locations = Promise.resolve(vscode.commands.executeCommand<vscode.Location[]>(source, uri, position)).then(loc => {\n            if (!loc) {\n                return [];\n            } else {\n                return loc.sort(ReferencesModel._compareLocations);\n            }\n        });\n        return new ReferencesModel(source, uri, position, locations);\n    }\n\n    private readonly _onDidChange = new vscode.EventEmitter<ReferencesModel | FileItem>();\n    readonly onDidChange = this._onDidChange.event;\n\n    readonly items: Promise<FileItem[]>;\n\n    constructor(\n        readonly source: ItemSource,\n        readonly uri: vscode.Uri,\n        readonly position: vscode.Position,\n        locations: Promise<vscode.Location[]>\n    ) {\n        this.items = locations.then(locations => {\n            const items: FileItem[] = [];\n            let last: FileItem | undefined;\n            locations.sort(ReferencesModel._compareLocations);\n            for (const loc of locations) {\n                if (!last || last.uri.toString() !== loc.uri.toString()) {\n                    last = new FileItem(loc.uri, [], this);\n                    items.push(last);\n                }\n                last.results.push(new ReferenceItem(loc, last));\n            }\n            return items;\n        });\n    }\n\n    async asHistoryItem(args: any[]) {\n        let doc: vscode.TextDocument;\n        try {\n            doc = await vscode.workspace.openTextDocument(this.uri);\n        } catch (e) {\n            return;\n        }\n        const range = getRequestRange(doc, this.position);\n        if (!range) {\n            return;\n        }\n        // make preview\n        let { before, inside, after } = getPreviewChunks(doc, range);\n        // ensure whitespace isn't trimmed when rendering MD\n        before = before.replace(/s$/g, String.fromCharCode(160));\n        after = after.replace(/^s/g, String.fromCharCode(160));\n        let preview = before + inside + after;\n\n        // source hint\n        let source = this.source === ItemSource.Implementations ? 'implementations' : 'references';\n\n        return new HistoryItem(\n            HistoryItem.makeId(this.source, this.uri, this.position),\n            inside,\n            `${vscode.workspace.asRelativePath(this.uri)} • ${preview} • ${source}`,\n            'references-view.refindReference',\n            args,\n            this.uri,\n            new WordAnchor(doc, this.position)\n        );\n    }\n\n    async total(): Promise<number> {\n        let n = 0;\n        for (const item of await this.items) {\n            n += item.results.length;\n        }\n        return n;\n    }\n\n    async get(uri: vscode.Uri): Promise<FileItem | undefined> {\n        for (const item of await this.items) {\n            if (item.uri.toString() === uri.toString()) {\n                return item;\n            }\n        }\n        return undefined;\n    }\n\n    async first(): Promise<ReferenceItem | undefined> {\n\n        const items = await this.items;\n\n        if (items.length === 0) {\n            return;\n        }\n        // NOTE: this.items is sorted by location (uri/range)\n        for (const item of items) {\n            if (item.uri.toString() === this.uri.toString()) {\n                // (1) pick the item at the request position\n                for (const ref of item.results) {\n                    if (ref.location.range.contains(this.position)) {\n                        return ref;\n                    }\n                }\n                // (2) pick the first item after or last before the request position\n                let lastBefore: ReferenceItem | undefined;\n                for (const ref of item.results) {\n                    if (ref.location.range.end.isAfter(this.position)) {\n                        return ref;\n                    }\n                    lastBefore = ref;\n                }\n                if (lastBefore) {\n                    return lastBefore;\n                }\n\n                break;\n            }\n        }\n\n        // (3) pick the file with the longest common prefix\n        let best = 0;\n        let bestValue = ReferencesModel._prefixLen(items[best].toString(), this.uri.toString());\n\n        for (let i = 1; i < items.length; i++) {\n            let value = ReferencesModel._prefixLen(items[i].uri.toString(), this.uri.toString());\n            if (value > bestValue) {\n                best = i;\n            }\n        }\n\n        return items[best].results[0];\n    }\n\n    async remove(item: FileItem | ReferenceItem): Promise<void> {\n\n        if (item instanceof FileItem) {\n            ReferencesModel._del(await this.items, item);\n            this._onDidChange.fire(this);\n\n        } else if (item instanceof ReferenceItem) {\n            ReferencesModel._del(item.parent.results, item);\n            if (item.parent.results.length === 0) {\n                ReferencesModel._del(await this.items, item.parent);\n                this._onDidChange.fire(this);\n            } else {\n                this._onDidChange.fire(item.parent);\n            }\n        }\n    }\n\n    async move(item: FileItem | ReferenceItem, fwd: boolean): Promise<ReferenceItem | undefined> {\n        const items = await this.items;\n        const delta = fwd ? +1 : -1;\n\n        const _move = (item: FileItem): FileItem => {\n            const idx = (items.indexOf(item) + delta + items.length) % items.length;\n            return items[idx];\n        };\n\n        if (item instanceof FileItem) {\n            if (fwd) {\n                return _move(item).results[0];\n            } else {\n                return ReferencesModel._tail(_move(item).results);\n            }\n        }\n\n        if (item instanceof ReferenceItem) {\n            const idx = item.parent.results.indexOf(item) + delta;\n            if (idx < 0) {\n                return ReferencesModel._tail(_move(item.parent).results);\n            } else if (idx >= item.parent.results.length) {\n                return _move(item.parent).results[0];\n            } else {\n                return item.parent.results[idx];\n            }\n        }\n    }\n\n    private static _compareLocations(a: vscode.Location, b: vscode.Location): number {\n        if (a.uri.toString() < b.uri.toString()) {\n            return -1;\n        } else if (a.uri.toString() > b.uri.toString()) {\n            return 1;\n        } else if (a.range.start.isBefore(b.range.start)) {\n            return -1;\n        } else if (a.range.start.isAfter(b.range.start)) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n\n    private static _prefixLen(a: string, b: string): number {\n        let pos = 0;\n        while (pos < a.length && pos < b.length && a.charCodeAt(pos) === b.charCodeAt(pos)) {\n            pos += 1;\n        }\n        return pos;\n    }\n\n    private static _del<T>(array: T[], e: T): void {\n        const idx = array.indexOf(e);\n        if (idx >= 0) {\n            array.splice(idx, 1);\n        }\n    }\n\n    private static _tail<T>(array: T[]): T | undefined {\n        return array[array.length - 1];\n    }\n}\n\n\n//#endregion\n\n//#region CallHierarchy Model\n\nexport const enum CallsDirection {\n    Incoming,\n    Outgoing\n}\n\n\nexport class RichCallsDirection {\n\n    private static _key = 'references-view.callHierarchyMode';\n\n    constructor(\n        private _mem: vscode.Memento,\n        private _value: CallsDirection = CallsDirection.Incoming,\n    ) {\n        const raw = _mem.get<number>(RichCallsDirection._key);\n        if (typeof raw === 'number' && raw >= 0 && raw <= 1) {\n            this.value = raw;\n        } else {\n            this.value = _value;\n        }\n    }\n\n    get value() {\n        return this._value;\n    }\n\n    set value(value: CallsDirection) {\n        this._value = value;\n        Context.CallHierarchyMode.set(this._value === CallsDirection.Incoming ? 'showIncoming' : 'showOutgoing');\n        this._mem.update(RichCallsDirection._key, value);\n    }\n}\n\nexport class CallItem {\n    constructor(\n        readonly item: vscode.CallHierarchyItem,\n        readonly parent: CallItem | undefined,\n        readonly locations: vscode.Location[] | undefined\n    ) { }\n}\n\nexport class CallsModel {\n\n    readonly source = 'callHierarchy';\n\n    readonly roots: Promise<CallItem[]>;\n\n    constructor(readonly uri: vscode.Uri, readonly position: vscode.Position, readonly direction: CallsDirection) {\n        this.roots = Promise.resolve(vscode.commands.executeCommand<vscode.CallHierarchyItem[]>('vscode.prepareCallHierarchy', uri, position)).then(items => {\n            return items ? items.map(item => new CallItem(item, undefined, undefined)) : [];\n        });\n    }\n\n    async resolveCalls(call: CallItem): Promise<CallItem[]> {\n        if (this.direction === CallsDirection.Incoming) {\n            const calls = await vscode.commands.executeCommand<vscode.CallHierarchyIncomingCall[]>('vscode.provideIncomingCalls', call.item);\n            return calls ? calls.map(item => new CallItem(item.from, call, item.fromRanges.map(range => new vscode.Location(item.from.uri, range)))) : [];\n        } else {\n            const calls = await vscode.commands.executeCommand<vscode.CallHierarchyOutgoingCall[]>('vscode.provideOutgoingCalls', call.item);\n            return calls ? calls.map(item => new CallItem(item.to, call, item.fromRanges.map(range => new vscode.Location(call.item.uri, range)))) : [];\n        }\n    }\n\n    changeDirection(): CallsModel {\n        return new CallsModel(this.uri, this.position, this.direction === CallsDirection.Incoming ? CallsDirection.Outgoing : CallsDirection.Incoming);\n    }\n\n    async isEmpty() {\n        return (await this.roots).length === 0;\n    }\n\n    async first() {\n        const [first] = await this.roots;\n        return first;\n    }\n\n    async asHistoryItem(args: any[]) {\n\n        const [first] = await this.roots;\n        const source = this.direction === CallsDirection.Incoming ? 'calls from' : 'callers of';\n\n\n        return new HistoryItem(\n            HistoryItem.makeId(first.item.uri, first.item.selectionRange.start.line, first.item.selectionRange.start.character, this.direction),\n            first.item.name,\n            `${vscode.workspace.asRelativePath(this.uri)} • ${source}`,\n            'references-view.showCallHierarchy',\n            args,\n            this.uri,\n            new WordAnchor(await vscode.workspace.openTextDocument(this.uri), this.position)\n        );\n    }\n}\n\n//#endregion\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as vscode from 'vscode';\nimport { Context } from './models';\n\nexport class WordAnchor {\n\n    private readonly _version: number;\n    private readonly _word: string | undefined;\n\n    constructor(private readonly _doc: vscode.TextDocument, private readonly _position: vscode.Position) {\n        this._version = _doc.version;\n        this._word = this._getAnchorWord(_doc, _position);\n    }\n\n    private _getAnchorWord(doc: vscode.TextDocument, pos: vscode.Position): string | undefined {\n        const range = doc.getWordRangeAtPosition(pos) || doc.getWordRangeAtPosition(pos, /[^\\s]+/);\n        return range && doc.getText(range);\n    }\n\n    getPosition(): vscode.Position | undefined {\n        // funky entry\n        if (!this._word) {\n            return this._position;\n        }\n\n        // no changes\n        if (this._version === this._doc.version) {\n            return this._position;\n        }\n\n        // no changes here...\n        const wordNow = this._getAnchorWord(this._doc, this._position);\n        if (this._word === wordNow) {\n            return this._position;\n        }\n\n        // changes: search _word downwards and upwards\n        const startLine = this._position.line;\n        let i = 0;\n        let line: number;\n        let checked: boolean;\n        do {\n            checked = false;\n            // nth line down\n            line = startLine + i;\n            if (line < this._doc.lineCount) {\n                checked = true;\n                let ch = this._doc.lineAt(line).text.indexOf(this._word);\n                if (ch >= 0) {\n                    return new vscode.Position(line, ch);\n                }\n            }\n            i += 1;\n            // nth line up\n            line = startLine - i;\n            if (line >= 0) {\n                checked = true;\n                let ch = this._doc.lineAt(line).text.indexOf(this._word);\n                if (ch >= 0) {\n                    return new vscode.Position(line, ch);\n                }\n            }\n        } while (i < 100 && checked);\n\n        // fallback\n        return this._position;\n    }\n}\n\nexport class HistoryItem {\n\n    static makeId(...args: any[]): string {\n        let str = '';\n        for (const a of args) {\n            str += JSON.stringify(a);\n        }\n        return Buffer.from(str).toString('base64');\n    }\n\n    constructor(\n        readonly id: string,\n        readonly label: string,\n        readonly description: string,\n        readonly commandId: string,\n        readonly extraArgs: string[],\n        readonly uri: vscode.Uri,\n        readonly anchor: WordAnchor,\n    ) { }\n}\n\nexport class History {\n\n    private readonly _items = new Map<string, HistoryItem>();\n\n    get isEmpty(): boolean {\n        return this._items.size == 0;\n    }\n\n    *[Symbol.iterator]() {\n        let values = [...this._items.values()];\n        for (let i = values.length - 1; i >= 0; i--) {\n            yield values[i];\n        }\n    }\n\n    add(item?: HistoryItem): void {\n        if (item) {\n            // maps have filo-ordering and by delete-insert we make\n            // sure to update the order for re-run queries\n            this._items.delete(item.id);\n            this._items.set(item.id, item);\n            Context.HasHistory.set(true);\n        }\n    }\n\n    get(id: string): HistoryItem | undefined {\n        return this._items.get(id);\n    }\n\n    clear(): void {\n        this._items.clear();\n        Context.HasHistory.set(false);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as vscode from 'vscode';\nimport { EditorHighlights } from './editorHighlights';\nimport { History, HistoryItem } from './history';\nimport { CallItem, CallsDirection, CallsModel, Context, FileItem, getPreviewChunks, getRequestRange, ItemSource, ReferenceItem, ReferencesModel, RichCallsDirection } from './models';\nimport { TreeDataProviderWrapper, TreeItem } from './provider';\n\nexport function activate(context: vscode.ExtensionContext) {\n\n    const callsDirection = new RichCallsDirection(context.globalState);\n    const history = new History();\n    const provider = new TreeDataProviderWrapper<TreeItem>();\n\n    const viewId = 'references-view.tree';\n\n    const revealView = async () => {\n        // upon first interaction set the reference list as active and reveal it\n        await Context.IsActive.set(true);\n        await vscode.commands.executeCommand(`${viewId}.focus`);\n    };\n\n    const view = vscode.window.createTreeView<FileItem | ReferenceItem | CallItem>(viewId, {\n        treeDataProvider: provider,\n        showCollapseAll: true\n    });\n\n    // editor highlights\n    const editorHighlights = new EditorHighlights(view);\n    vscode.window.onDidChangeActiveTextEditor(() => view.visible && editorHighlights.show(), undefined, context.subscriptions);\n    view.onDidChangeVisibility(e => e.visible ? editorHighlights.show() : editorHighlights.hide(), undefined, context.subscriptions);\n\n    // current active model\n    let model: ReferencesModel | CallsModel | undefined;\n\n    const updateModel = async (newModel: ReferencesModel | CallsModel | undefined) => {\n        model = newModel;\n\n        // update state\n        view.message = undefined;\n        editorHighlights.setModel(model);\n\n        // update context\n        Context.HasResult.set(Boolean(model));\n        Context.Source.set(model?.source);\n\n        revealView();\n        provider.update(newModel || history);\n\n        if (newModel) {\n            await showResultsMessage();\n        } else {\n            showNoResultsMessage();\n        }\n    };\n\n    const showNoResultsMessage = () => {\n        let message: string;\n        if (history.isEmpty) {\n            message = 'No results.';\n        } else {\n            message = 'No results. Try running a previous search again:';\n        }\n        view.message = message;\n        view.title = 'Results';\n    };\n\n    const showResultsMessage = async () => {\n        if (model instanceof ReferencesModel) {\n\n            const total = await model.total();\n            const files = (await model.items).length;\n\n            // update message\n            if (total === 1 && files === 1) {\n                view.message = `${total} result in ${files} file`;\n            } else if (total === 1) {\n                view.message = `${total} result in ${files} files`;\n            } else if (files === 1) {\n                view.message = `${total} results in ${files} file`;\n            } else {\n                view.message = `${total} results in ${files} files`;\n            }\n\n            // update title\n            if (model.source === ItemSource.References) {\n                view.title = `Results (${total})`;\n            } else if (model.source === ItemSource.Implementations) {\n                view.title = `Implementations (${total})`;\n            }\n\n        } else if (model instanceof CallsModel) {\n            // update title\n            if (model.direction === CallsDirection.Incoming) {\n                view.title = 'Callers Of';\n            } else {\n                view.title = 'Calls From';\n            }\n            view.message = '';\n\n        } else {\n            view.message = undefined;\n            view.title = 'Results';\n        }\n    };\n\n    const updateReferencesModel = async (model?: ReferencesModel) => {\n\n        // wait for model, update context and UI\n        await updateModel(model);\n\n        if (model) {\n            // bail out when having no results...\n            if ((await model.items).length === 0) {\n                await updateModel(undefined);\n                return;\n            }\n            // reveal\n            const selection = await model.first();\n            if (selection && view.visible) {\n                view.reveal(selection, { select: true, focus: true });\n            }\n            // add to history\n            history.add(await model.asHistoryItem([model.source]));\n        }\n    };\n\n    const findReferencesCommand = async (source: ItemSource, uri?: vscode.Uri, position?: vscode.Position) => {\n        let model: ReferencesModel | undefined;\n        if (uri instanceof vscode.Uri && position instanceof vscode.Position) {\n            // trust args if correct'ish\n            model = ReferencesModel.create(uri, position, source);\n\n        } else if (vscode.window.activeTextEditor) {\n            // take args from active editor\n            let editor = vscode.window.activeTextEditor;\n            if (getRequestRange(editor.document, editor.selection.active)) {\n                model = ReferencesModel.create(editor.document.uri, editor.selection.active, source);\n            }\n        }\n        updateReferencesModel(model);\n    };\n\n    const refindCommand = (item: HistoryItem) => {\n        if (item instanceof HistoryItem) {\n            vscode.commands.executeCommand(item.commandId, ...[...item.extraArgs, item.uri, item.anchor.getPosition()]);\n        }\n    };\n\n    const refreshCommand = async () => {\n        const [last] = history;\n        if (last) {\n            refindCommand(last);\n        }\n    };\n\n    const updateCallHierachyModel = async (direction = callsDirection.value, uri?: vscode.Uri, position?: vscode.Position) => {\n\n        let model: CallsModel | undefined;\n\n        if (uri instanceof vscode.Uri && position instanceof vscode.Position) {\n            // trust args if correct'ish\n            model = new CallsModel(uri, position, direction);\n\n        } else if (vscode.window.activeTextEditor) {\n            // take args from active editor\n            let editor = vscode.window.activeTextEditor;\n            if (getRequestRange(editor.document, editor.selection.active)) {\n                model = new CallsModel(editor.document.uri, editor.selection.active, direction);\n            }\n        }\n\n        await updateModel(model);\n\n        if (model instanceof CallsModel) {\n            if (await model.isEmpty()) {\n                await updateModel(undefined);\n                return;\n            }\n            // reveal\n            const selection = await model.first();\n            if (selection && view.visible) {\n                view.reveal(selection, { select: true, focus: true, expand: true });\n            }\n            // add to history\n            history.add(await model.asHistoryItem([model.direction]));\n        }\n    };\n\n    const setCallHierarchyDirectionCommand = async (direction: CallsDirection, arg: any) => {\n        callsDirection.value = direction;\n        if (arg instanceof CallItem) {\n            return updateCallHierachyModel(direction, arg.item.uri, arg.item.selectionRange.start);\n\n        } else if (model instanceof CallsModel) {\n            return updateCallHierachyModel(direction, model.uri, model.position);\n        }\n    };\n\n    const clearCommand = async () => {\n        await updateModel(undefined);\n    };\n\n    const clearHistoryCommand = async () => {\n        history.clear();\n        await updateModel(undefined);\n    };\n\n    const showItemCommand = (arg?: ReferenceItem | HistoryItem | CallItem | any, focusEditor?: boolean) => {\n\n        let uri: vscode.Uri | undefined;\n        let pos: vscode.Position | undefined;\n        let preserveFocus = !focusEditor;\n\n        if (arg instanceof ReferenceItem) {\n            const { location } = arg;\n            uri = location.uri;\n            pos = location.range.start;\n\n        } else if (arg instanceof CallItem) {\n            uri = arg.item.uri;\n            pos = arg.item.selectionRange.start;\n\n        } else if (arg instanceof HistoryItem) {\n            uri = arg.uri;\n            pos = arg.anchor.getPosition();\n            preserveFocus = false;\n        }\n\n        if (uri && pos) {\n            vscode.window.showTextDocument(uri, {\n                selection: new vscode.Range(pos, pos),\n                preserveFocus\n            });\n        }\n    };\n\n    const removeRefCommand = async (arg?: ReferenceItem | FileItem | any) => {\n        if (model instanceof ReferencesModel) {\n            let next: ReferenceItem | undefined;\n            if (arg instanceof ReferenceItem) {\n                next = await model.move(arg, true);\n                if (next?.parent !== arg.parent) {\n                    next = undefined;\n                }\n            }\n            await model.remove(arg);\n            editorHighlights.refresh();\n            showResultsMessage();\n            if (next) {\n                view.reveal(next, { select: true });\n            }\n        }\n    };\n\n    const focusRefCommand = async (fwd: boolean) => {\n        if (!(model instanceof ReferencesModel)) {\n            return;\n        }\n        const selection = view.selection[0] || model.first();\n        if (selection instanceof HistoryItem || selection instanceof CallItem) {\n            return;\n        }\n        const next = await model.move(selection, fwd);\n        if (next) {\n            view.reveal(next, { select: true });\n            showItemCommand(next, true);\n        }\n    };\n\n    const copyCommand = async (arg?: ReferenceItem | FileItem | ReferencesModel | any | undefined) => {\n        let val = '';\n        let stack = [arg];\n        while (stack.length > 0) {\n            let item = stack.pop();\n            if (item instanceof ReferencesModel) {\n                stack.push(...(await item.items).slice(0, 99));\n\n            } else if (item instanceof ReferenceItem) {\n                let doc = await item.parent.getDocument();\n                let chunks = getPreviewChunks(doc, item.location.range, 21, false);\n                val += `  ${item.location.range.start.line + 1}, ${item.location.range.start.character + 1}: ${chunks.before + chunks.inside + chunks.after} \\n`;\n\n            } else if (item instanceof FileItem) {\n                val += `${vscode.workspace.asRelativePath(item.uri)} \\n`;\n                stack.push(...item.results);\n            }\n        }\n        if (val) {\n            await vscode.env.clipboard.writeText(val);\n        }\n    };\n\n    const copyPathCommand = (arg?: FileItem) => {\n        if (arg instanceof FileItem) {\n            if (arg.uri.scheme === 'file') {\n                vscode.env.clipboard.writeText(arg.uri.fsPath);\n            } else {\n                vscode.env.clipboard.writeText(arg.uri.toString(true));\n            }\n        }\n    };\n\n    const showHistryPicks = async () => {\n        interface HistoryPick extends vscode.QuickPickItem {\n            item: HistoryItem;\n        }\n        const picks = [...history].map(item => <HistoryPick>{\n            label: item.label,\n            description: item.description,\n            item\n        });\n        const pick = await vscode.window.showQuickPick(picks, { placeHolder: 'Select previous reference search' });\n        if (pick) {\n            await refindCommand(pick.item);\n        }\n    };\n\n    const showReferences = async (uri: vscode.Uri, position: vscode.Position, locations: vscode.Location[]) => {\n        await updateReferencesModel(new ReferencesModel(ItemSource.References, uri, position, Promise.resolve(locations)));\n    };\n    let showReferencesDisposable: vscode.Disposable | undefined;\n    const config = 'references.preferredLocation';\n    function updateShowReferences(event?: vscode.ConfigurationChangeEvent) {\n        if (event && !event.affectsConfiguration(config)) {\n            return;\n        }\n        const value = vscode.workspace.getConfiguration().get<string>(config);\n        if (showReferencesDisposable) {\n            showReferencesDisposable.dispose();\n            showReferencesDisposable = undefined;\n        }\n        if (value === 'view') {\n            showReferencesDisposable = vscode.commands.registerCommand('editor.action.showReferences', showReferences);\n        }\n    };\n    updateShowReferences();\n\n    context.subscriptions.push(\n        view,\n        vscode.workspace.onDidChangeConfiguration(updateShowReferences),\n        vscode.commands.registerCommand('references-view.find', () => findReferencesCommand(ItemSource.References)),\n        vscode.commands.registerCommand('references-view.findImplementations', () => findReferencesCommand(ItemSource.Implementations)),\n        vscode.commands.registerCommand('references-view.refindReference', findReferencesCommand),\n        vscode.commands.registerCommand('references-view.showCallHierarchy', updateCallHierachyModel),\n        vscode.commands.registerCommand('references-view.showOutgoingCalls', (arg) => setCallHierarchyDirectionCommand(CallsDirection.Outgoing, arg)),\n        vscode.commands.registerCommand('references-view.showIncomingCalls', (arg) => setCallHierarchyDirectionCommand(CallsDirection.Incoming, arg)),\n        vscode.commands.registerCommand('references-view.refind', refindCommand),\n        vscode.commands.registerCommand('references-view.refresh', refreshCommand),\n        vscode.commands.registerCommand('references-view.clear', clearCommand),\n        vscode.commands.registerCommand('references-view.clearHistory', clearHistoryCommand),\n        vscode.commands.registerCommand('references-view.show', showItemCommand),\n        vscode.commands.registerCommand('references-view.remove', removeRefCommand),\n        vscode.commands.registerCommand('references-view.next', () => focusRefCommand(true)),\n        vscode.commands.registerCommand('references-view.prev', () => focusRefCommand(false)),\n        vscode.commands.registerCommand('references-view.copy', copyCommand),\n        vscode.commands.registerCommand('references-view.copyAll', () => copyCommand(model)),\n        vscode.commands.registerCommand('references-view.copyPath', copyPathCommand),\n        vscode.commands.registerCommand('references-view.pickFromHistory', showHistryPicks),\n    );\n\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as vscode from 'vscode';\nimport { CallItem, CallsModel, FileItem, ReferencesModel } from './models';\nimport { TreeItem } from './provider';\n\nexport class EditorHighlights {\n\n    private readonly _decorationType = vscode.window.createTextEditorDecorationType({\n        backgroundColor: new vscode.ThemeColor('editor.findMatchHighlightBackground'),\n        rangeBehavior: vscode.DecorationRangeBehavior.ClosedClosed,\n        overviewRulerLane: vscode.OverviewRulerLane.Center,\n        overviewRulerColor: new vscode.ThemeColor('editor.findMatchHighlightBackground'),\n    });\n\n    private _model?: ReferencesModel | CallsModel;\n    private _listener?: vscode.Disposable;\n    private _ignore = new Set<FileItem | undefined>();\n\n    constructor(private readonly _view: vscode.TreeView<TreeItem>) { }\n\n    setModel(model?: ReferencesModel | CallsModel): void {\n        this._model = model;\n        this._ignore.clear();\n        if (this._listener) {\n            this._listener.dispose();\n        }\n\n        if (model instanceof ReferencesModel) {\n            this._listener = vscode.workspace.onDidChangeTextDocument(async e => {\n                // add those items that have been changed to a \n                // ignore list so that we won't update decorations\n                // for them again\n                this._ignore.add(await model.get(e.document.uri));\n            });\n\n        } else if (model instanceof CallsModel) {\n            this._listener = this._view.onDidChangeSelection(() => {\n                this.show();\n            });\n        }\n\n        this.show();\n    }\n\n    async show() {\n        const { activeTextEditor: editor } = vscode.window;\n        if (editor && editor.viewColumn) {\n            const ranges: vscode.Range[] = [];\n            if (this._model instanceof ReferencesModel) {\n                const item = await this._model.get(editor.document.uri);\n                if (item && !this._ignore.has(item)) {\n                    ranges.push(...item.results.map(ref => ref.location.range));\n                }\n            } else if (this._model instanceof CallsModel) {\n                const [sel] = this._view.selection;\n                if (sel instanceof CallItem) {\n                    let locations = sel.locations;\n                    if (!locations) {\n                        locations = [new vscode.Location(sel.item.uri, sel.item.selectionRange)];\n                    }\n                    for (const loc of locations) {\n                        if (loc.uri.toString() === editor.document.uri.toString()) {\n                            ranges.push(loc.range);\n                        }\n                    }\n                }\n            }\n            editor.setDecorations(this._decorationType, ranges);\n        }\n    }\n\n    hide() {\n        for (const editor of vscode.window.visibleTextEditors) {\n            editor.setDecorations(this._decorationType, []);\n        }\n    }\n\n    refresh() {\n        this.hide();\n        this.show();\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as vscode from 'vscode';\nimport { History, HistoryItem } from './history';\nimport { CallItem as CallHierarchyItem, CallsModel, FileItem, getPreviewChunks, ReferenceItem, ReferencesModel } from './models';\n\nexport class ReferencesProvider implements vscode.TreeDataProvider<FileItem | ReferenceItem> {\n\n    private readonly _onDidChangeTreeData = new vscode.EventEmitter<FileItem | ReferenceItem>();\n    readonly onDidChangeTreeData = this._onDidChangeTreeData.event;\n\n    private readonly _modelListener: vscode.Disposable;\n\n    constructor(\n        private _model: ReferencesModel\n    ) {\n        this._modelListener = _model.onDidChange(e => this._onDidChangeTreeData.fire(e instanceof FileItem ? e : undefined));\n    }\n\n    dispose(): void {\n        this._onDidChangeTreeData.dispose();\n        this._modelListener.dispose();\n    }\n\n    async getTreeItem(element: FileItem | ReferenceItem): Promise<vscode.TreeItem> {\n\n        if (element instanceof FileItem) {\n            // files\n            const result = new vscode.TreeItem(element.uri);\n            result.contextValue = 'file-item';\n            result.description = true;\n            result.iconPath = vscode.ThemeIcon.File;\n            result.collapsibleState = vscode.TreeItemCollapsibleState.Collapsed;\n            return result;\n\n        } else {\n            // references\n            const { range } = element.location;\n            const doc = await element.parent.getDocument(true);\n            const { before, inside, after } = getPreviewChunks(doc, range);\n\n            const label: vscode.TreeItemLabel = {\n                label: before + inside + after,\n                highlights: [[before.length, before.length + inside.length]]\n            };\n\n            const result = new vscode.TreeItem2(label);\n            result.collapsibleState = vscode.TreeItemCollapsibleState.None;\n            result.contextValue = 'reference-item';\n            result.command = { command: 'references-view.show', title: 'Open Reference', arguments: [element] };\n            return result;\n        }\n    }\n\n    async getChildren(element?: FileItem | ReferenceItem | undefined) {\n        if (!element) {\n            // group results by FileItem\n            return this._model.items;\n        } else if (element instanceof FileItem) {\n            // matches inside a file\n            return element.results;\n        }\n    }\n\n    getParent(element: FileItem | ReferenceItem) {\n        return element instanceof ReferenceItem ? element.parent : undefined;\n    }\n}\n\nexport class CallItemDataProvider implements vscode.TreeDataProvider<CallHierarchyItem> {\n\n    private readonly _emitter = new vscode.EventEmitter<CallHierarchyItem | undefined>();\n    readonly onDidChangeTreeData = this._emitter.event;\n\n    constructor(\n        private _model: CallsModel\n    ) { }\n\n    getTreeItem(element: CallHierarchyItem): vscode.TreeItem {\n\n        const item = new vscode.TreeItem(element.item.name);\n        item.description = element.item.detail;\n        item.contextValue = 'call-item';\n        item.iconPath = CallItemDataProvider._getThemeIcon(element.item.kind);\n        item.command = { command: 'references-view.show', title: 'Open Call', arguments: [element] };\n        item.collapsibleState = vscode.TreeItemCollapsibleState.Collapsed;\n        return item;\n    }\n\n    getChildren(element?: CallHierarchyItem | undefined) {\n        if (!element) {\n            return this._model.roots;\n        } else {\n            return this._model.resolveCalls(element);\n        }\n    }\n\n    getParent(element: CallHierarchyItem) {\n        return element.parent;\n    }\n\n    // vscode.SymbolKind.File === 0, Module === 1, etc...\n    private static _themeIconIds = [\n        'symbol-file', 'symbol-module', 'symbol-namespace', 'symbol-package', 'symbol-class', 'symbol-method',\n        'symbol-property', 'symbol-field', 'symbol-constructor', 'symbol-enum', 'symbol-interface',\n        'symbol-function', 'symbol-variable', 'symbol-constant', 'symbol-string', 'symbol-number', 'symbol-boolean',\n        'symbol-array', 'symbol-object', 'symbol-key', 'symbol-null', 'symbol-enum-member', 'symbol-struct',\n        'symbol-event', 'symbol-operator', 'symbol-type-parameter'\n    ];\n\n    private static _getThemeIcon(kind: vscode.SymbolKind): vscode.ThemeIcon | undefined {\n        let id = CallItemDataProvider._themeIconIds[kind];\n        return id && new vscode.ThemeIcon(id);\n    }\n}\n\nexport class HistoryDataProvider implements vscode.TreeDataProvider<HistoryItem> {\n\n    private readonly _emitter = new vscode.EventEmitter<HistoryItem | undefined>();\n    readonly onDidChangeTreeData = this._emitter.event;\n\n    constructor(private readonly _history: History) { }\n\n    getTreeItem(element: HistoryItem): vscode.TreeItem {\n        // history items\n        // let source: string | undefined;\n        // if (element.source === ItemSource.References) {\n        //     source = 'references';\n        // } else if (element.source === ItemSource.Implementations) {\n        //     source = 'implementations';\n        // } else if (element.source === ItemSource.CallHierarchy) {\n        //     source = 'call hierarchy';\n        // }\n        const result = new vscode.TreeItem(element.label);\n        // result.description = `${vscode.workspace.asRelativePath(element.uri)} • ${element.line} ${source && ` • ${source}`}`;\n        result.description = element.description;\n        result.command = { command: 'references-view.show', arguments: [element], title: 'Show' };\n        result.collapsibleState = vscode.TreeItemCollapsibleState.None;\n        result.contextValue = 'history-item';\n        return result;\n    }\n\n    getChildren() {\n        return [...this._history];\n    }\n\n    getParent() {\n        return undefined;\n    }\n}\n\n\nexport type TreeItem = FileItem | ReferenceItem | HistoryItem | CallHierarchyItem;\n\nexport class TreeDataProviderWrapper<T> implements vscode.TreeDataProvider<T> {\n\n    private _provider?: Required<vscode.TreeDataProvider<any>>;\n    private _providerListener?: vscode.Disposable;\n    private _onDidChange = new vscode.EventEmitter<any>();\n\n    readonly onDidChangeTreeData = this._onDidChange.event;\n\n    update(model: ReferencesModel | CallsModel | History) {\n        if (this._providerListener) {\n            this._providerListener.dispose();\n            this._providerListener = undefined;\n        }\n\n        if (this._provider && typeof (<vscode.Disposable><any>this._provider).dispose === 'function') {\n            (<vscode.Disposable><any>this._provider).dispose();\n            this._provider = undefined;\n        }\n\n        if (model instanceof ReferencesModel) {\n            this._provider = new ReferencesProvider(model);\n        } else if (model instanceof CallsModel) {\n            this._provider = new CallItemDataProvider(model);\n        } else {\n            this._provider = new HistoryDataProvider(model);\n        }\n\n        this._onDidChange.fire();\n        this._providerListener = this._provider.onDidChangeTreeData(e => this._onDidChange.fire(e));\n    }\n\n    getTreeItem(element: T): vscode.TreeItem | Thenable<vscode.TreeItem> {\n        return this._provider!.getTreeItem(element);\n    }\n\n    getChildren(element?: T | undefined) {\n        return this._provider?.getChildren(element);\n    }\n\n    getParent(element: T) {\n        return this._provider?.getParent(element);\n    }\n}\n"],"sourceRoot":""}