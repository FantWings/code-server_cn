{"version":3,"sources":["vs/code/browser/workbench/fake","vs/code/browser/workbench/file:/repo/lib/vscode/src/vs/code/browser/workbench/workbench.ts"],"names":["__m","deps","result","i","len","length","LocalStorageCredentialsProvider","credentials","this","_credentials","serializedCredentials","window","localStorage","getItem","CREDENTIALS_OPENED_KEY","JSON","parse","error","Array","isArray","[object Object]","setItem","stringify","service","account","doGetPassword","credential","password","deletePassword","push","save","found","filter","map","PollingURLCallbackProvider","lifecycle_1","Disposable","_onCallback","_register","workbench_web_api_1","Emitter","onCallback","event","options","queryValues","Map","requestId","uuid_1","generateUuid","set","QUERY_KEYS","REQUEST_ID","scheme","authority","path","query","fragment","undefined","SCHEME","AUTHORITY","PATH","QUERY","FRAGMENT","periodicFetchCallback","Date","now","doCreateUri","startTime","request_1","request","url","toString","cancellation_1","CancellationToken","None","content","buffer_1","streamToBuffer","stream","byteLength","fire","URI","revive","console","FETCH_TIMEOUT","setTimeout","FETCH_INTERVAL","index","forEach","value","key","prefix","encodeURIComponent","location","href","with","WorkspaceProvider","workspace","payload","reuse","isSame","targetHref","createTargetUrl","browser_1","isStandalone","open","windows_1","isFolderToOpen","document","origin","pathname","QUERY_PARAM_FOLDER","folderUri","isWorkspaceToOpen","QUERY_PARAM_WORKSPACE","workspaceUri","QUERY_PARAM_EMPTY_WINDOW","QUERY_PARAM_PAYLOAD","workspaceA","workspaceB","resources_1","isEqual","configElement","getElementById","configElementAttribute","getAttribute","Error","config","staticExtensions","extension","extensionLocation","Object","create","body","assign","workspaceProvider","urlCallbackProvider","credentialsProvider","call"],"mappings":";;;CAAA,WACA,IAAAA,EAAA,CAAA,sCAAA,UAAA,UAAA,iCAAA,sBAAA,8BAAA,wBAAA,2BAAA,wCAAA,qCAAA,2BAAA,uCACA,SAAAC,GAEA,IADA,IAAAC,EAAA,GACAC,EAAA,EAAAC,EAAAH,EAAAI,OAAAF,EAAAC,EAAAD,IACAD,EAAAC,GAAAH,EAAAC,EAAAE,IAEA,OAAAD,6HCcA,MAAMI,EAKLC,kBACC,IAAKC,KAAKC,aAAc,CACvB,IACC,MAAMC,EAAwBC,OAAOC,aAAaC,QAAQP,EAAgCQ,wBACtFJ,IACHF,KAAKC,aAAeM,KAAKC,MAAMN,IAE/B,MAAOO,IAIJC,MAAMC,QAAQX,KAAKC,gBACvBD,KAAKC,aAAe,IAItB,OAAOD,KAAKC,aAGLW,OACPT,OAAOC,aAAaS,QAAQf,EAAgCQ,uBAAwBC,KAAKO,UAAUd,KAAKD,cAGzGa,kBAAkBG,EAAiBC,GAClC,OAAOhB,KAAKiB,cAAcF,EAASC,GAG5BJ,oBAAoBG,EAAiBC;AAC5C,IAAK,MAAME,KAAclB,KAAKD,YAC7B,GAAImB,EAAWH,UAAYA,IACH,iBAAZC,GAAwBA,IAAYE,EAAWF,SACzD,OAAOE,EAAWC,SAKrB,OAAO,KAGRP,kBAAkBG,EAAiBC,EAAiBG,GACnDnB,KAAKoB,eAAeL,EAASC,GAE7BhB,KAAKD,YAAYsB,KAAK,CAAEN,QAAAA,EAASC,QAAAA,EAASG,SAAAA,IAE1CnB,KAAKsB,OAGNV,qBAAqBG,EAAiBC,GACrC,IAAIO,GAAQ,EAgBZ,OAdAvB,KAAKC,aAAeD,KAAKD,YAAYyB,OAAON,GACvCA,EAAWH,UAAYA,GAAWG,EAAWF,UAAYA,IAC5DO,GAAQ,GAED,IAMLA,GACHvB,KAAKsB,OAGCC,EAGRX,mBAAmBG,GAClB,OAAOf,KAAKiB,cAAcF,GAG3BH,sBAAsBG,GACrB,OAAOf,KAAKD,YACVyB,OAAON,GAAcA,EAAWH,UAAYA,GAC5CU,IAAI,EAAGT,QAAAA,EAASG,SAAAA,MAAe,CAAGH,QAAAA,EAASG,SAAAA,MA7E9BrB,EAAAQ,uBAAyB,uBAiF1C,MAAMoB,UAAmCC,EAAAC,WAAzChB,kCAckBZ,KAAA6B,YAA4B7B,KAAK8B,UAAU,IAAIC,EAAAC,SACvDhC,KAAAiC,WAAyBjC,KAAK6B,YAAYK,MAEnDtB,OAAOuB,GACN,MAAMC,EAAmC,IAAIC,IAEvCC,EAAYC,EAAAC,eAClBJ,EAAYK,IAAIf,EAA2BgB,WAAWC,WAAYL,GAElE,MAAMM,OAAEA,EAAMC,UAAEA,EAASC,KAAEA,EAAIC,MAAEA,EAAKC,SAAEA,GAAab,GAAoB,CAAES,YAAQK,EAAWJ,eAAWI,EAAWH,UAAMG,EAAWF,WAAOE,EAAWD,cAAUC,GAyBjK,OAvBIL,GACHR,EAAYK,IAAIf,EAA2BgB,WAAWQ,OAAQN;AAG3DC,GACHT,EAAYK,IAAIf,EAA2BgB,WAAWS,UAAWN,GAG9DC,GACHV,EAAYK,IAAIf,EAA2BgB,WAAWU,KAAMN,GAGzDC,GACHX,EAAYK,IAAIf,EAA2BgB,WAAWW,MAAON,GAG1DC,GACHZ,EAAYK,IAAIf,EAA2BgB,WAAWY,SAAUN,GAIjEhD,KAAKuD,sBAAsBjB,EAAWkB,KAAKC,OAEpCzD,KAAK0D,YAAY,YAAatB,GAG9BxB,4BAA4B0B,EAAmBqB,GAGtD,MAAMvB,EAAmC,IAAIC,IAC7CD,EAAYK,IAAIf,EAA2BgB,WAAWC,WAAYL,GAElE,MAAM5C,QAAekE,EAAAC,QAAQ,CAC5BC,IAAK9D,KAAK0D,YAAY,kBAAmBtB,GAAa2B,UAAS,IAC7DC,EAAAC,kBAAkBC,MAGfC,QAAgBC,EAAAC,eAAe3E,EAAO4E,QAC5C,GAAIH,EAAQI,WAAa,EACxB,IACCvE,KAAK6B,YAAY2C,KAAKzC,EAAA0C,IAAIC,OAAOnE,KAAKC,MAAM2D,EAAQJ,cACnD,MAAOtD,GACRkE,QAAQlE,MAAMA,QAOZ+C,KAAKC,MAAQE,EAAYjC,EAA2BkD,eACvDC,WAAW,IAAM7E,KAAKuD,sBAAsBjB,EAAWqB,GAAYjC,EAA2BoD,gBAIxFlE,YAAYkC,EAAcV,GACjC,IAAIW,OAA4BE,EAEhC,GAAIb,EAAa,CAChB,IAAI2C,EAAQ,EACZ3C,EAAY4C,QAAQ,CAACC,EAAOC,KACtBnC,IACJA,EAAQ,IAGT,MAAMoC,EAAsB,GAAZJ,IAAiB,GAAK,IACtChC,GAAS,GAAGoC,IAASD,KAAOE,mBAAmBH,OAIjD,OAAOlD,EAAA0C,IAAIjE,MAAML,OAAOkF,SAASC,MAAMC,KAAK,CAAEzC,KAAAA,EAAMC,MAAAA,KA5FrCrB,EAAAoD,eAAiB,IACjBpD,EAAAkD,cAAgB,IAEhBlD,EAAAgB,WAAa,CAC5BC,WAAY,mBACZO,OAAQ,gBACRC,UAAW,mBACXC,KAAM,cACNC,MAAO;AACPC,SAAU,mBAuFZ,MAAMkC,EAQL5E,YACiB6E,EACAC,GADA1F,KAAAyF,UAAAA,EACAzF,KAAA0F,QAAAA,EAGjB9E,WAAW6E,EAAuBtD,GACjC,IAAIA,MAAAA,OAAO,EAAPA,EAASwD,SAAUxD,EAAQuD,SAAW1F,KAAK4F,OAAO5F,KAAKyF,UAAWA,GACrE,OAGD,MAAMI,EAAa7F,KAAK8F,gBAAgBL,EAAWtD,GAC/C0D,KACC1D,MAAAA,OAAO,EAAPA,EAASwD,OACZxF,OAAOkF,SAASC,KAAOO,EAEnBE,EAAAC,aACH7F,OAAO8F,KAAKJ,EAAY,SAAU,cAElC1F,OAAO8F,KAAKJ,IAMRjF,gBAAgB6E,EAAuBtD,GAG9C,IAAI0D,OAAiC5C,EAoBrC,OAnBKwC,EAKIS,EAAAC,eAAeV,GACvBI,EAAa,GAAGO,SAASf,SAASgB,SAASD,SAASf,SAASiB,YAAYd,EAAkBe,sBAAsBnB,mBAAmBK,EAAUe,UAAUzC,cAIhJmC,EAAAO,kBAAkBhB,KAC1BI,EAAa,GAAGO,SAASf,SAASgB,SAASD,SAASf,SAASiB,YAAYd,EAAkBkB,yBAAyBtB,mBAAmBK,EAAUkB,aAAa5C,eAV9J8B,EAAa,GAAGO,SAASf,SAASgB,SAASD,SAASf,SAASiB,YAAYd,EAAkBoB,iCAcxFzE,MAAAA,OAAO,EAAPA,EAASuD,WACZG,GAAc,IAAIL,EAAkBqB,uBAAuBzB,mBAAmB7E,KAAKO,UAAUqB,EAAQuD,aAG/FG,EAGAjF,OAAOkG,EAAwBC;AACtC,OAAKD,GAAeC,EAIhBb,EAAAC,eAAeW,IAAeZ,EAAAC,eAAeY,GACzCC,EAAAC,QAAQH,EAAWN,UAAWO,EAAWP,cAG7CN,EAAAO,kBAAkBK,KAAeZ,EAAAO,kBAAkBM,KAC/CC,EAAAC,QAAQH,EAAWH,aAAcI,EAAWJ,cAR5CG,IAAeC,GA1DjBvB,EAAAoB,yBAA2B,KAC3BpB,EAAAe,mBAAqB,SACrBf,EAAAkB,sBAAwB,YAExBlB,EAAAqB,oBAAsB,UAqE9B,WAGC,MAAMK,EAAgBd,SAASe,eAAe,sCACxCC,EAAyBF,EAAgBA,EAAcG,aAAa,sBAAmBpE,EAC7F,IAAKiE,IAAkBE,EACtB,MAAM,IAAIE,MAAM,qCAGjB,MAAMC,EAAsGhH,KAAKC,MAAM4G,GAGnH1G,MAAMC,QAAQ4G,EAAOC,mBACxBD,EAAOC,iBAAiBxC,QAAQyC,IAC/BA,EAAUC,kBAAoB3F,EAAA0C,IAAIC,OAAO+C,EAAUC,qBAKrD,IACIjC,EACAC,EAAUiC,OAAOC,OAAO,MAK1BnC,EADG8B,EAAOf,UACE,CAAEA,UAAWzE,EAAA0C,IAAIC,OAAO6C,EAAOf,YACjCe,EAAOZ,aACL,CAAEA,aAAc5E,EAAA0C,IAAIC,OAAO6C,EAAOZ,oBAElC1D,EAKdlB,EAAA6F,OAAOxB,SAASyB,KAAIF,OAAAG,OAAAH,OAAAG,OAAA,GAChBP,GAAM,CACTQ,kBAAmB,IAAIvC,EAAkBC,EAAWC,GACpDsC,oBAAqB,IAAItG,EACzBuG,oBAAqB,IAAInI,KAvC3B,QDrRAoI,KAAAlI","file":"workbench.js","sourcesContent":["}).call(this);","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IWorkbenchConstructionOptions, create, URI, Event, Emitter, UriComponents, ICredentialsProvider, IURLCallbackProvider, IWorkspaceProvider, IWorkspace } from 'vs/workbench/workbench.web.api';\nimport { generateUuid } from 'vs/base/common/uuid';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { streamToBuffer } from 'vs/base/common/buffer';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { request } from 'vs/base/parts/request/browser/request';\nimport { isFolderToOpen, isWorkspaceToOpen } from 'vs/platform/windows/common/windows';\nimport { isEqual } from 'vs/base/common/resources';\nimport { isStandalone } from 'vs/base/browser/browser';\n\ninterface ICredential {\n\tservice: string;\n\taccount: string;\n\tpassword: string;\n}\n\nclass LocalStorageCredentialsProvider implements ICredentialsProvider {\n\n\tstatic readonly CREDENTIALS_OPENED_KEY = 'credentials.provider';\n\n\tprivate _credentials: ICredential[] | undefined;\n\tprivate get credentials(): ICredential[] {\n\t\tif (!this._credentials) {\n\t\t\ttry {\n\t\t\t\tconst serializedCredentials = window.localStorage.getItem(LocalStorageCredentialsProvider.CREDENTIALS_OPENED_KEY);\n\t\t\t\tif (serializedCredentials) {\n\t\t\t\t\tthis._credentials = JSON.parse(serializedCredentials);\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\t// ignore\n\t\t\t}\n\n\t\t\tif (!Array.isArray(this._credentials)) {\n\t\t\t\tthis._credentials = [];\n\t\t\t}\n\t\t}\n\n\t\treturn this._credentials;\n\t}\n\n\tprivate save(): void {\n\t\twindow.localStorage.setItem(LocalStorageCredentialsProvider.CREDENTIALS_OPENED_KEY, JSON.stringify(this.credentials));\n\t}\n\n\tasync getPassword(service: string, account: string): Promise<string | null> {\n\t\treturn this.doGetPassword(service, account);\n\t}\n\n\tprivate async doGetPassword(service: string, account?: string): Promise<string | null> {\n\t\tfor (const credential of this.credentials) {\n\t\t\tif (credential.service === service) {\n\t\t\t\tif (typeof account !== 'string' || account === credential.account) {\n\t\t\t\t\treturn credential.password;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tasync setPassword(service: string, account: string, password: string): Promise<void> {\n\t\tthis.deletePassword(service, account);\n\n\t\tthis.credentials.push({ service, account, password });\n\n\t\tthis.save();\n\t}\n\n\tasync deletePassword(service: string, account: string): Promise<boolean> {\n\t\tlet found = false;\n\n\t\tthis._credentials = this.credentials.filter(credential => {\n\t\t\tif (credential.service === service && credential.account === account) {\n\t\t\t\tfound = true;\n\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t});\n\n\t\tif (found) {\n\t\t\tthis.save();\n\t\t}\n\n\t\treturn found;\n\t}\n\n\tasync findPassword(service: string): Promise<string | null> {\n\t\treturn this.doGetPassword(service);\n\t}\n\n\tasync findCredentials(service: string): Promise<Array<{ account: string, password: string }>> {\n\t\treturn this.credentials\n\t\t\t.filter(credential => credential.service === service)\n\t\t\t.map(({ account, password }) => ({ account, password }));\n\t}\n}\n\nclass PollingURLCallbackProvider extends Disposable implements IURLCallbackProvider {\n\n\tstatic readonly FETCH_INTERVAL = 500; \t\t\t// fetch every 500ms\n\tstatic readonly FETCH_TIMEOUT = 5 * 60 * 1000; \t// ...but stop after 5min\n\n\tstatic readonly QUERY_KEYS = {\n\t\tREQUEST_ID: 'vscode-requestId',\n\t\tSCHEME: 'vscode-scheme',\n\t\tAUTHORITY: 'vscode-authority',\n\t\tPATH: 'vscode-path',\n\t\tQUERY: 'vscode-query',\n\t\tFRAGMENT: 'vscode-fragment'\n\t};\n\n\tprivate readonly _onCallback: Emitter<URI> = this._register(new Emitter<URI>());\n\treadonly onCallback: Event<URI> = this._onCallback.event;\n\n\tcreate(options?: Partial<UriComponents>): URI {\n\t\tconst queryValues: Map<string, string> = new Map();\n\n\t\tconst requestId = generateUuid();\n\t\tqueryValues.set(PollingURLCallbackProvider.QUERY_KEYS.REQUEST_ID, requestId);\n\n\t\tconst { scheme, authority, path, query, fragment } = options ? options : { scheme: undefined, authority: undefined, path: undefined, query: undefined, fragment: undefined };\n\n\t\tif (scheme) {\n\t\t\tqueryValues.set(PollingURLCallbackProvider.QUERY_KEYS.SCHEME, scheme);\n\t\t}\n\n\t\tif (authority) {\n\t\t\tqueryValues.set(PollingURLCallbackProvider.QUERY_KEYS.AUTHORITY, authority);\n\t\t}\n\n\t\tif (path) {\n\t\t\tqueryValues.set(PollingURLCallbackProvider.QUERY_KEYS.PATH, path);\n\t\t}\n\n\t\tif (query) {\n\t\t\tqueryValues.set(PollingURLCallbackProvider.QUERY_KEYS.QUERY, query);\n\t\t}\n\n\t\tif (fragment) {\n\t\t\tqueryValues.set(PollingURLCallbackProvider.QUERY_KEYS.FRAGMENT, fragment);\n\t\t}\n\n\t\t// Start to poll on the callback being fired\n\t\tthis.periodicFetchCallback(requestId, Date.now());\n\n\t\treturn this.doCreateUri('/callback', queryValues);\n\t}\n\n\tprivate async periodicFetchCallback(requestId: string, startTime: number): Promise<void> {\n\n\t\t// Ask server for callback results\n\t\tconst queryValues: Map<string, string> = new Map();\n\t\tqueryValues.set(PollingURLCallbackProvider.QUERY_KEYS.REQUEST_ID, requestId);\n\n\t\tconst result = await request({\n\t\t\turl: this.doCreateUri('/fetch-callback', queryValues).toString(true)\n\t\t}, CancellationToken.None);\n\n\t\t// Check for callback results\n\t\tconst content = await streamToBuffer(result.stream);\n\t\tif (content.byteLength > 0) {\n\t\t\ttry {\n\t\t\t\tthis._onCallback.fire(URI.revive(JSON.parse(content.toString())));\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(error);\n\t\t\t}\n\n\t\t\treturn; // done\n\t\t}\n\n\t\t// Continue fetching unless we hit the timeout\n\t\tif (Date.now() - startTime < PollingURLCallbackProvider.FETCH_TIMEOUT) {\n\t\t\tsetTimeout(() => this.periodicFetchCallback(requestId, startTime), PollingURLCallbackProvider.FETCH_INTERVAL);\n\t\t}\n\t}\n\n\tprivate doCreateUri(path: string, queryValues: Map<string, string>): URI {\n\t\tlet query: string | undefined = undefined;\n\n\t\tif (queryValues) {\n\t\t\tlet index = 0;\n\t\t\tqueryValues.forEach((value, key) => {\n\t\t\t\tif (!query) {\n\t\t\t\t\tquery = '';\n\t\t\t\t}\n\n\t\t\t\tconst prefix = (index++ === 0) ? '' : '&';\n\t\t\t\tquery += `${prefix}${key}=${encodeURIComponent(value)}`;\n\t\t\t});\n\t\t}\n\n\t\treturn URI.parse(window.location.href).with({ path, query });\n\t}\n}\n\nclass WorkspaceProvider implements IWorkspaceProvider {\n\n\tstatic QUERY_PARAM_EMPTY_WINDOW = 'ew';\n\tstatic QUERY_PARAM_FOLDER = 'folder';\n\tstatic QUERY_PARAM_WORKSPACE = 'workspace';\n\n\tstatic QUERY_PARAM_PAYLOAD = 'payload';\n\n\tconstructor(\n\t\tpublic readonly workspace: IWorkspace,\n\t\tpublic readonly payload: object\n\t) { }\n\n\tasync open(workspace: IWorkspace, options?: { reuse?: boolean, payload?: object }): Promise<void> {\n\t\tif (options?.reuse && !options.payload && this.isSame(this.workspace, workspace)) {\n\t\t\treturn; // return early if workspace and environment is not changing and we are reusing window\n\t\t}\n\n\t\tconst targetHref = this.createTargetUrl(workspace, options);\n\t\tif (targetHref) {\n\t\t\tif (options?.reuse) {\n\t\t\t\twindow.location.href = targetHref;\n\t\t\t} else {\n\t\t\t\tif (isStandalone) {\n\t\t\t\t\twindow.open(targetHref, '_blank', 'toolbar=no'); // ensures to open another 'standalone' window!\n\t\t\t\t} else {\n\t\t\t\t\twindow.open(targetHref);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate createTargetUrl(workspace: IWorkspace, options?: { reuse?: boolean, payload?: object }): string | undefined {\n\n\t\t// Empty\n\t\tlet targetHref: string | undefined = undefined;\n\t\tif (!workspace) {\n\t\t\ttargetHref = `${document.location.origin}${document.location.pathname}?${WorkspaceProvider.QUERY_PARAM_EMPTY_WINDOW}=true`;\n\t\t}\n\n\t\t// Folder\n\t\telse if (isFolderToOpen(workspace)) {\n\t\t\ttargetHref = `${document.location.origin}${document.location.pathname}?${WorkspaceProvider.QUERY_PARAM_FOLDER}=${encodeURIComponent(workspace.folderUri.toString())}`;\n\t\t}\n\n\t\t// Workspace\n\t\telse if (isWorkspaceToOpen(workspace)) {\n\t\t\ttargetHref = `${document.location.origin}${document.location.pathname}?${WorkspaceProvider.QUERY_PARAM_WORKSPACE}=${encodeURIComponent(workspace.workspaceUri.toString())}`;\n\t\t}\n\n\t\t// Append payload if any\n\t\tif (options?.payload) {\n\t\t\ttargetHref += `&${WorkspaceProvider.QUERY_PARAM_PAYLOAD}=${encodeURIComponent(JSON.stringify(options.payload))}`;\n\t\t}\n\n\t\treturn targetHref;\n\t}\n\n\tprivate isSame(workspaceA: IWorkspace, workspaceB: IWorkspace): boolean {\n\t\tif (!workspaceA || !workspaceB) {\n\t\t\treturn workspaceA === workspaceB; // both empty\n\t\t}\n\n\t\tif (isFolderToOpen(workspaceA) && isFolderToOpen(workspaceB)) {\n\t\t\treturn isEqual(workspaceA.folderUri, workspaceB.folderUri); // same workspace\n\t\t}\n\n\t\tif (isWorkspaceToOpen(workspaceA) && isWorkspaceToOpen(workspaceB)) {\n\t\t\treturn isEqual(workspaceA.workspaceUri, workspaceB.workspaceUri); // same workspace\n\t\t}\n\n\t\treturn false;\n\t}\n}\n\n(function () {\n\n\t// Find config by checking for DOM\n\tconst configElement = document.getElementById('vscode-workbench-web-configuration');\n\tconst configElementAttribute = configElement ? configElement.getAttribute('data-settings') : undefined;\n\tif (!configElement || !configElementAttribute) {\n\t\tthrow new Error('Missing web configuration element');\n\t}\n\n\tconst config: IWorkbenchConstructionOptions & { folderUri?: UriComponents, workspaceUri?: UriComponents } = JSON.parse(configElementAttribute);\n\n\t// Revive static extension locations\n\tif (Array.isArray(config.staticExtensions)) {\n\t\tconfig.staticExtensions.forEach(extension => {\n\t\t\textension.extensionLocation = URI.revive(extension.extensionLocation);\n\t\t});\n\t}\n\n\t// Find workspace to open and payload\n\tlet foundWorkspace = false;\n\tlet workspace: IWorkspace;\n\tlet payload = Object.create(null);\n\n\t// If no workspace is provided through the URL, check for config attribute from server\n\tif (!foundWorkspace) {\n\t\tif (config.folderUri) {\n\t\t\tworkspace = { folderUri: URI.revive(config.folderUri) };\n\t\t} else if (config.workspaceUri) {\n\t\t\tworkspace = { workspaceUri: URI.revive(config.workspaceUri) };\n\t\t} else {\n\t\t\tworkspace = undefined;\n\t\t}\n\t}\n\n\t// Finally create workbench\n\tcreate(document.body, {\n\t\t...config,\n\t\tworkspaceProvider: new WorkspaceProvider(workspace, payload),\n\t\turlCallbackProvider: new PollingURLCallbackProvider(),\n\t\tcredentialsProvider: new LocalStorageCredentialsProvider()\n\t});\n})();\n"]}